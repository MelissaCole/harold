; Harold is split up into various "plugins".  By default, no plugins will be
; started and Harold won't do much of anything.  To activate a plugin, create a
; section for it in your configuration as below.


; Implements an HTTP server for other plugins to use.  It does not do anything
; itself.
;
; required plugins: none
[harold:plugin:http]
; what endpoint http server should listen on for incoming connections
; see: https://twistedmatrix.com/documents/14.0.0/core/howto/endpoints.html#servers
endpoint = tcp:port=8888
; a secret token used to authenticate requests made to harold
hmac_secret = asupersecrettoken
; deprecated
secret =
; how the outside world can find harold
public_root = http://harold.example.com/


; An IRC client that can relay messages from HTTP->IRC or be used by other
; plugins.
;
; If the HTTP plugin is configured, this plugin will add several endpoints to
; allow messages to be sent to IRC.
;
; required plugins: none
; optional plugins: http
[harold:plugin:irc]
; harold will authenticate with userserv if this is present
username = username
; nick to display as in channels
nick = harold
; where to connect and how to authenticate
host = irc.example.org
port = 7000
use_ssl = true
password = hijklmnop
; if provided, harold will authenticate with userserv as `username` with this passowrd
userserv_password = abcdefg
; additional channels to join upon connection. useful for messaging from HTTP API.
channels = #channel,#otherchannel
; harold will make silly squawking noises in a channel if specified
parrot_channel =


; An XMPP client for other plugins to use.
;
; required plugins: none
[harold:plugin:jabber]
; jabber server to connect to
host = jabber.example.org
port = 5222
; jabber id to authenticate as
id = harold@example.org
; password for jabber id
password = abcdefg


; A database client for other plugins to use.
;
; Note: harold has so far only been tested with sqlite.
;
; required plugins: none
[harold:plugin:database]
; http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html
connection_string = sqlite:////var/lib/harold/salon.db


; Provides an API for deploy tools such as [Rollingpin] to report ongoing code
; deploys in IRC.
;
; [Rollingpin]: https://github.com/reddit/rollingpin
;
; required plugins: http, irc
[harold:plugin:deploy]
; which irc channel to announce deploys in
channel = #code
; how long a deploy should last in seconds before being cleaned up
deploy_ttl = 3600


; An SMTP client for other plugins to use.
;
; required plugins: none
[harold:plugin:smtp]
; smtp server to connect to
host = smtp.example.com
port = 465
use_ssl = true
; credentials for authetication
username = username
password = password


; A simple alert broadcaster and manager for use with a monitoring system.
;
; Alerts can be set via the HTTP API and they will be broadcast via SMTP or
; Jabber.  If Jabber is enabled, clients are able to acknowledge alerts as well
; as check the status of the system.  It is also possible to send heartbeats,
; harold will send alerts if a configured period of time elapses since the last
; heartbeat.
;
; required plugins: http
; optional plugins: jabber, smtp
[harold:plugin:alerts]
; whom to send alerts to. format should be a comma delimited list of jabber:jabberid or smtp:address
recipients = jabber:person@example.com, smtp:other-person@example.com
; how long an alert should be remembered for (useful for the "status" command)
ttl = 3600
; how long acknowledgements can last -- if the alert is still active after this
; time it will begin making noise again
max_mute_duration = 300


; A github webhook listener that announces commits, pull requests, and code
; review to IRC.
;
; Additionally, if the database plugin is configured, the Code Salon web
; interface can read the database to provide a dashboard of ongoing code
; reviews.
;
; required plugins: http, irc
; optional plugins: database
[harold:plugin:github]
; sometimes people use different nicks on different services, github usernames
; can be mapped to irc nicks this way.
githubusername = irc-nick
githubusername2 = irc-nick2

; each repository to watch should have its own section set up
[harold:repository:spladug/harold]
; which channel to send messages about this repo to
channel = #code
; what commit notifications look like (this example format is the default if unspecified)
format = %(author)s committed %(commit_ids)s (%(url)s) to %(repository)s: %(summary)s
; same as above but for push notifications of > max_commit_count commits
bundled_format = %(author)s made %(commit_count)d commits (%(commit_range)s - %(url)s) to %(repository)s
; the threshold to switch from individual commit messages to the bundled message
max_commit_count = 3
